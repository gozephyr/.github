name: Go CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run go vet
      run: go vet ./...
      
    - name: Run staticcheck
      uses: dominikh/staticcheck-action@v1.3.0
      with:
        version: "2023.1.6"
        install-go: false
        
    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        
    - name: Run integration tests
      if: github.event_name == 'push' || (github.event_name == 'pull_request' && !contains(github.head_ref, 'dependabot'))
      run: |
        # Add your integration test commands here
        echo "Running integration tests..."
        # go test -tags=integration ./...
  
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Build application
      run: |
        go build -v -ldflags="-s -w" -o ./bin/app ./cmd/main.go
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: go-binary
        path: ./bin/app
        retention-days: 30

  dependabot-tests:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run Dependabot-specific tests
      run: |
        echo "Running enhanced tests for Dependabot PR..."
        go mod download
        go mod verify
        
        # Run tests with extra verbose output
        go test -v -race -count=1 ./...
        
        # Check for breaking changes in API
        echo "Checking for potential breaking changes..."
        go list -m all
        
        # Run benchmark tests to ensure no performance regression
        go test -bench=. -run=^$ ./... || true
        
    - name: Comment on PR
      if: always()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { owner, repo, number } = context.issue;
          const conclusion = '${{ job.status }}';
          const emoji = conclusion === 'success' ? '‚úÖ' : '‚ùå';
          
          const comment = `${emoji} **Dependabot Tests ${conclusion === 'success' ? 'Passed' : 'Failed'}**
          
**Go Version:** ${{ env.GO_VERSION }}
**Test Status:** ${conclusion}
**Commit:** ${context.sha.substring(0, 7)}

${conclusion === 'success' ? 
  'üéâ All tests passed! This dependency update looks safe to merge.' : 
  '‚ö†Ô∏è Tests failed. Please review the dependency changes carefully.'}`;
          
          await github.rest.issues.createComment({
            owner,
            repo,
            issue_number: number,
            body: comment
          });
